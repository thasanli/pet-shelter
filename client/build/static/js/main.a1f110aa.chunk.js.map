{"version":3,"sources":["views/Form.js","views/IndexView.js","views/PetView.js","views/editPet.js","App.js","serviceWorker.js","index.js"],"names":["FormView","props","useState","name","setName","type","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","err","setErr","to","onSubmit","e","console","log","preventDefault","axios","post","then","res","data","message","navigate","catch","json","handleSubmit","style","color","onChange","target","value","IndexView","allPets","setAllPets","useEffect","get","margin","sort","a","b","map","pet","key","_id","PetView","setPet","id","onClick","event","delete","handleDelete","selectedPet","like","put","response","EditPet","Axios","runValidators","io","App","className","path","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a1f110aa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect, Router, navigate } from \"@reach/router\";\n\n// import { FormControl, FormLabel, FormHelperText, Input, InputLabel, Button } from '@material-ui/core';\n\n// const flex = {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     width: \"40%\",\n//     margin: \"0 auto\"\n// }\n\nconst FormView = (props) => {\n\n    const [name, setName] = useState(null)\n    const [type, setType] = useState(null)\n    const [description, setDescription] = useState(null)\n    const [skill1, setSkill1] = useState(null)\n    const [skill2, setSkill2] = useState(null)\n    const [skill3, setSkill3] = useState(null)\n\n    const [err, setErr] = useState(null);\n\n\n    function handleSubmit(e) {\n        console.log('test');\n        e.preventDefault();\n        axios.post(`http://localhost:8000/api/pet/`, {\n            name: name,\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3\n        })\n            .then((res) => {\n                if (res.data.message == null) {\n                    navigate('/')\n                }\n                console.log(res.data.message);\n                setErr(res.data.message);\n\n            })\n            .catch((err) => {\n                console.log(err.json().message);\n            })\n    }\n\n    const errorStyle = {\n        color: \"red\"\n    }\n\n    return (\n\n        <div>\n            <Link to=\"/\"> back to home </Link>\n            <h1>Pet Shelter</h1>\n            <p>Know a pet needing a home? </p>\n            <form onSubmit={(e) => handleSubmit(e)} >\n                <p style={errorStyle}>{err}</p>\n                <div>\n                    <label> Pet Name: </label>\n                    <input type=\"text\"\n                        onChange={(e) => setName(e.target.value)} />\n                    <p></p>\n                </div>\n                <div>\n                    <label> Pet Type: </label>\n                    <input type=\"text\"\n                        onChange={(e) => setType(e.target.value)} />\n                    <p></p>\n                </div>\n                <div>\n                    <label> Pet Description: </label>\n                    <input type=\"text\"\n                        onChange={(e) => setDescription(e.target.value)} />\n                    <p></p>\n                </div>\n                <p>Skills (optional) </p>\n                <div>\n                    <label> Skill 1: </label>\n                    <input type=\"text\"\n                        onChange={(e) => setSkill1(e.target.value)} />\n                </div>\n                <div>\n                    <label> Skill 2: </label>\n                    <input type=\"text\"\n                        onChange={(e) => setSkill2(e.target.value)} />\n                </div>\n                <div>\n                    <label> Skill 3: </label>\n                    <input type=\"text\"\n                        onChange={(e) => setSkill3(e.target.value)} />\n                </div>\n                <button>Add Pet</button>\n            </form>\n        </div>\n    )\n}\n\nexport default FormView;","import React, { useEffect, useState } from 'react';\nimport { Link, Redirect, Router } from \"@reach/router\";\nimport axios from 'axios';\n\nconst IndexView = (props) => {\n\n    const [allPets, setAllPets] = useState(null);\n\n    useEffect((e) => {\n        axios.get(\"http://localhost:8000/api/pet\")\n            .then((res) => {\n\n                setAllPets(res.data)\n            })\n            .catch((err) => {\n\n            })\n    })\n\n    const lableStyle = {\n        margin: \"0 auto\"\n    }\n\n    if (allPets == null) {\n        return 'loading...'\n    }\n\n\n\n    return (\n        <div>\n            <Link to=\"/pets/new\"> add a pet to the shelter</Link>\n            <h1>Pet Shelter</h1>\n            <p>These pets are looking for a good home</p>\n            <table style={lableStyle}>\n                <thead>\n                    <td>Name</td>\n                    <td>Type</td>\n                    <td>Actions</td>\n                </thead>\n                {allPets.sort((a, b) => a.type > b.type ? 1 : -1).map((pet) => {\n                    return (\n                        <tbody key={pet._id}>\n                            <td>{pet.name}</td>\n                            <td>{pet.type}</td>\n                            <td>\n                                <Link to={`/pets/${pet._id}`}>details</Link>\n                                |\n                                <Link to={`/pets/${pet._id}/edit`} >edit</Link>\n                            </td>\n                        </tbody>\n                    );\n                })}\n            </table>\n\n\n        </div>\n    );\n\n}\n\nexport default IndexView;","import React, { useEffect, useState } from 'react';\nimport { Link, Redirect, Router, navigate } from \"@reach/router\";\nimport axios from 'axios';\n\n\nconst PetView = (props) => {\n    const [pet, setPet] = useState(null);\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/pet/${props.id}`)\n            .then((res) => {\n                setPet(res.data);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }, [])\n\n    function handleDelete(event) {\n        axios.delete(`http://localhost:8000/api/pet/${event}`)\n            .then((res) => {\n                console.log(res);\n                navigate('/')\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n\n\n    function handleLike() {\n        const selectedPet = pet;\n        selectedPet.like++;\n        const like = selectedPet.like\n        console.log(like);\n\n        axios\n            .put(`http://localhost:8000/api/pet/${selectedPet._id}`, { like: like })\n            .then((res) => {\n                setPet(res.data);\n            })\n            .catch((err) => {\n                console.log(err.response);\n            });\n    }\n\n    if (pet == null) {\n        return 'loading...'\n    }\n\n\n    return (\n        <div>\n            <Link to=\"/\"> back to home </Link>\n            <br />\n\n            <button onClick={event => handleDelete(event = pet._id)} > Adopt {pet.name}</button>\n\n\n            <h1>Pet Shelter</h1>\n            <p>Details about: {pet.name}</p>\n            <div>\n                <p>Pet type: {pet.type} </p>\n                <p>Description: {pet.description}</p>\n                <p>Skills: <br /> {pet.skill1} <br /> {pet.skill2} <br />{pet.skill3} </p>\n            </div>\n            <button onClick={handleLike}> Like {pet.name} </button> <br />\n            <span><br /> {pet.like}  like(s)</span>\n        </div>\n    );\n}\n\nexport default PetView;","import { navigate, Link } from '@reach/router';\nimport Axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\n\nconst EditPet = (props) => {\n    const [name, setName] = useState(null)\n    const [type, setType] = useState(null)\n    const [description, setDescription] = useState(null)\n    const [skill1, setSkill1] = useState(null)\n    const [skill2, setSkill2] = useState(null)\n    const [skill3, setSkill3] = useState(null)\n\n    const [err, setErr] = useState(null);\n\n\n    useEffect(() => {\n        Axios.get(`http://localhost:8000/api/pet/${props.id}`)\n            .then((res) => {\n                setName(res.data.name)\n                setType(res.data.type)\n                setDescription(res.data.description)\n                setSkill1(res.data.skill1)\n                setSkill2(res.data.skill2)\n                setSkill3(res.data.skill3)\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, [])\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        Axios.put(`http://localhost:8000/api/pet/${props.id}`, {\n            type,\n            description,\n            skill1,\n            skill2,\n            skill3\n        }, { runValidators: true })\n            .then((res) => {\n                if (res.data.message == null) {\n                    navigate('/')\n                }\n                setErr(res.data.message);\n            })\n            .catch((err) => {\n                console.log(err.json().message);\n            })\n    }\n\n    return (\n        <div>\n            <Link to=\"/\"> back to home </Link>\n            <h1>Pet Shelter</h1>\n            <p>Edit {}</p>\n            <p>{err}</p>\n            <form onSubmit={(e) => handleSubmit(e)} >\n                <div>\n                    <label> Pet Name: </label>\n                    <input type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)} />\n                    <p>{}</p>\n                </div>\n                <div>\n                    <label> Pet Type: </label>\n                    <input type=\"text\"\n                        value={type}\n                        onChange={(e) => setType(e.target.value)} />\n                    <p></p>\n                </div>\n                <div>\n                    <label> Pet Description: </label>\n                    <input type=\"text\"\n                        value={description}\n                        onChange={(e) => setDescription(e.target.value)} />\n                    <p></p>\n                </div>\n                <p>Skills (optional) </p>\n                <div>\n                    <label> Skill 1: </label>\n                    <input type=\"text\"\n                        value={skill1}\n                        onChange={(e) => setSkill1(e.target.value)} />\n                </div>\n                <div>\n                    <label> Skill 2: </label>\n                    <input type=\"text\"\n                        value={skill2}\n                        onChange={(e) => setSkill2(e.target.value)} />\n                </div>\n                <div>\n                    <label> Skill 3: </label>\n                    <input type=\"text\"\n                        value={skill3}\n                        onChange={(e) => setSkill3(e.target.value)} />\n                </div>\n                <button>Edit</button>\n            </form>\n\n        </div>\n    );\n\n}\n\nexport default EditPet;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport FormView from './views/Form'\nimport IndexView from './views/IndexView';\nimport { Link, Redirect, Router } from \"@reach/router\";\nimport PetView from './views/PetView';\nimport EditPet from './views/editPet';\n\n\n\nimport io from 'socket.io-client';\nconst socket = io(\":8000\");\n\nfunction App() {\n  // const [item, setItem] = useState(null);\n\n  // useEffect(() => {\n  //   socket.on(\"item updates\", (updatedItem) => {\n  //     setItem(updatedItem);\n  //     console.log(updatedItem);\n  //   });\n  //   return () => {\n  //     socket.disconnect(true);\n  //   }\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <IndexView path=\"/\" />\n        <FormView path=\"/pets/new\" />\n        <PetView path=\"/pets/:id\" />\n        <EditPet path=\"/pets/:id/edit\" />\n\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}